tiny	2	0	intermediary	named
c	pt	net/minecraft/item/ArmorMaterial
c	agj	net/minecraft/block/BlockLeaves
c	ago	net/minecraft/block/BlockFlowingFluid
c	py	net/minecraft/item/BowItem
c	agn	net/minecraft/block/BlockFluid
c	agq	net/minecraft/block/BlockLockedChest
c	agp	net/minecraft/block/BlockStationaryFluid
c	agv	net/minecraft/block/BlockNote
c	qc	net/minecraft/item/CoalItem
c	qf	net/minecraft/item/ItemGroup
	m	(Ljava/util/List;)V	a	getItems
		p	1		list
	m	()Ljava/lang/String;	b	getName
	f	Lqf;	f	MISC
	m	()Lrg;	d	getIcon
	f	Lqf;	d	REDSTONE
	f	[Lqf;	a	GROUPS
	f	Lqf;	b	BUILDING_BLOCKS
	f	Lqf;	l	MATERIALS
	f	Lqf;	j	COMBAT
	f	Ljava/lang/String;	o	name
	f	Lqf;	h	FOOD
	m	()I	k	getSide
	m	()I	a	getId
	m	()Ljava/lang/String;	c	getTranslatedName
	m	()I	e	getIconId
		c	Returns the id of the item to be displayed as the icon.
	m	(ILjava/lang/String;)V	<init>	<init>
		p	1		id
		p	2		name
	f	Lqf;	e	TRANSPORTATION
	f	Lqf;	c	DECORATIONS
	m	()Z	l	onTop
	f	Lqf;	m	INVENTORY
	f	I	n	id
	f	Lqf;	k	BREWING
	f	Lqf;	i	TOOLS
	m	(Ljava/lang/String;)Lqf;	a	texture
		p	1		path
	f	Lqf;	g	SEARCH
	f	Ljava/lang/String;	p	texture
c	qg	net/minecraft/item/GroupBuilding
c	qh	net/minecraft/item/GroupBrewing
c	qi	net/minecraft/item/GroupMaterials
c	ib	net/minecraft/util/map/MapInt
	c	i do not know what this class does in all honesty
	m	(ILjava/lang/Object;)V	a	set
		p	2	object	value
		p	1	integer	id
	m	(I)I	g	shiftId
		p	0	integer	val
	m	(I)Ljava/lang/Object;	d	remove
		p	1	integer	id
	m	([Lic;)V	a	shift
		p	1	arr	list
	m	()Ljava/util/Set;	d	get
	m	(I)Ljava/lang/Object;	a	get
		p	1	integer	id
	f	F	d	entrySize
	f	Ljava/util/Set;	f	ints
	f	I	e	hash
	f	I	b	newSize
	m	(I)V	h	resize
		p	1	integer	length
	f	I	c	size
	m	(II)I	a	and
		p	0	integer1	val1
		p	1	integer2	val2
	m	(I)Lic;	e	shift
		p	1	integer	id
	m	(I)Lic;	c	getEntry
		p	1	integer	id
	m	(IILjava/lang/Object;I)V	a	create
		p	4	integer4	id
	m	(I)Z	b	contains
		p	1	integer	id
	m	()V	c	reset
	f	[Lic;	a	entries
c	qj	net/minecraft/item/GroupInventory
c	ic	net/minecraft/util/map/IntEntry
	m	()I	a	getId
	f	I	a	id
	m	()Ljava/lang/Object;	b	getValue
	f	Ljava/lang/Object;	b	value
	m	(Ljava/lang/Object;)Z	equals	equals
		p	1	object	other
	m	(IILjava/lang/Object;Lic;)V	<init>	<init>
		p	4	ic	entry
		p	3	object	value
		p	2	integer2	id
		p	1	integer1	hash
	f	Lic;	c	next
	f	I	d	hash
c	qk	net/minecraft/item/GroupDecorations
c	ahb	net/minecraft/block/BlockOre
c	ql	net/minecraft/item/GroupRedstone
c	aha	net/minecraft/block/BlockObsidian
c	qm	net/minecraft/item/GroupTransportation
c	ahd	net/minecraft/block/BlockPressurePlate
c	qn	net/minecraft/item/GroupMisc
c	ig	net/minecraft/util/math/MathUtils
	m	(D)I	c	floor
		p	0	double1	val
	m	(D)F	a	sqrt
		p	0	double1	val
	m	(III)I	a	max
		p	0	integer1	val1
		p	1	integer2	val2
		p	2	integer3	val3
	m	(F)F	c	sqrt
		p	0	float1	val
	m	(FFF)F	a	max
		p	1	float2	val2
		p	2	float3	val3
		p	0	float1	val1
	m	(F)I	d	floor
		p	0	float1	val
c	qo	net/minecraft/item/GroupSearch
c	qp	net/minecraft/item/GroupFood
c	qq	net/minecraft/item/GroupTools
c	aa	net/minecraft/command/CommandTime
	m	(Lr;I)V	a	parseArgument
c	ij	net/minecraft/util/Profiler
c	ab	net/minecraft/command/CommandToggleDownfall
c	qr	net/minecraft/item/GroupCombat
c	ahg	net/minecraft/block/BlockGoldenRail
c	ik	net/minecraft/util/ProfilerEntry
c	ac	net/minecraft/util/error/TranslatedException
	f	[Ljava/lang/Object;	a	objects
	m	()[Ljava/lang/Object;	a	getObjects
	m	(Ljava/lang/String;[Ljava/lang/Object;)V	<init>	<init>
		p	2		objects
		p	1		cause
c	ad	net/minecraft/util/error/FormattedException
c	ae	net/minecraft/util/error/SyntaxException
c	af	net/minecraft/util/error/PlayerNotFoundException
c	ag	net/minecraft/util/error/NotFoundException
c	ah	net/minecraft/util/error/SyntaxedException
c	ahp	net/minecraft/block/BlockSand
	m	(II)V	<init>	<init>
		p	1		id
	m	(Luo;III)V	l	l
		p	4		z
		p	3		y
		p	2		x
		p	1		world
	m	(Luo;III)Z	e_	e_
		p	0		world
		p	2		y
		p	1		x
		p	3		z
c	aj	net/minecraft/util/I18nHelper
	m	(Ljava/lang/String;)Ljava/lang/String;	a	getRaw
		p	0		rawKey
	m	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;	a	getf
		p	1		formats
		p	0		key
	f	Lak;	a	I18N
c	aho	net/minecraft/block/BlockSandstone
c	ak	net/minecraft/util/I18n
	c	Translates keys into readable text.
	m	()Ljava/util/TreeMap;	b	getKeyMap
	m	(Ljava/lang/String;)Ljava/lang/String;	b	getRaw
		p	1		key
	m	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;	a	getf
		p	2		formats
		p	1		key
	m	(Ljava/lang/String;)Ljava/lang/String;	c	get
		p	1		name
	f	Ljava/lang/String;	d	locale
	f	Ljava/util/Properties;	b	config
	m	(Ljava/util/Properties;Ljava/lang/String;)V	a	loadFile
		p	1		props
		p	2		locale
	f	Z	e	loaded
	m	()Z	d	isLoaded
	m	(Ljava/lang/String;)V	<init>	<init>
		p	1		locale
	m	()V	e	load
	m	(Ljava/lang/String;)V	a	loadLocale
		p	1		locale
	m	(Ljava/lang/String;)Z	e	renderBackwards
		p	0		key
	m	()Ljava/lang/String;	c	getLocale
	f	Ljava/util/TreeMap;	c	localeMap
	m	()Lak;	a	getInstance
	f	Lak;	a	INSTANCE
c	al	net/minecraft/nbt/TagByteArray
c	ahq	net/minecraft/block/BlockSapling
c	am	net/minecraft/nbt/TagByte
c	an	net/minecraft/nbt/TagCompound
	m	(Ljava/lang/String;)Lat;	m	getList
	m	(Ljava/lang/String;)Z	b	has
	m	(Ljava/lang/String;S)V	a	set
	m	(Ljava/lang/String;B)V	a	set
	m	(Ljava/lang/String;F)V	a	set
	m	(Ljava/lang/String;)Lan;	l	getTag
	m	(Ljava/lang/String;)F	g	getFloat
	m	(Ljava/lang/String;Lay;)V	a	set
	m	(Ljava/lang/String;)S	d	getShort
	m	(Ljava/lang/String;)B	c	getByte
	m	(Ljava/lang/String;Z)V	a	set
	m	(Ljava/lang/String;)Z	n	getBoolean
c	ao	net/minecraft/nbt/TagDouble
	f	D	a	value
c	ap	net/minecraft/nbt/TagEnd
c	ahu	net/minecraft/block/BlockSponge
c	net/minecraft/client/Minecraft	net/minecraft/client/Minecraft
	m	()Lnet/minecraft/client/Minecraft;	x	getInstance
	f	Layp;	A	client
c	aq	net/minecraft/nbt/TagFloat
	f	F	a	value
c	rc	net/minecraft/item/FoodItem
c	ar	net/minecraft/nbt/TagIntArray
c	ahw	net/minecraft/block/BlockSpawner
c	as	net/minecraft/nbt/TagInt
c	re	net/minecraft/item/AxeItem
c	at	net/minecraft/nbt/TagList
	m	(I)Lay;	b	get
c	au	net/minecraft/nbt/TagLong
c	av	net/minecraft/nbt/TagUtils
	m	(Lan;Ljava/io/File;)V	b	toFileOverwrite
		c	Edit an existing file with the contents of the CompoundTag.
		p	0		tag
		p	1		file
	m	(Ljava/io/DataInput;)Lan;	a	stream
		c	Load a CompoundTag from a DataInput.
		p	0		input
	m	(Lan;)[B	a	toBytes
		p	0		tag
	m	([B)Lan;	a	fromBytes
		p	0		bytes
	m	(Lan;Ljava/io/File;)V	a	toFile
		c	Create a new file with the contents of the tag. Replaces an existing file completely!
		p	1		file
		p	0		tag
	m	(Lan;Ljava/io/DataOutput;)V	a	stream
		p	1		output
		p	0		tag
	m	(Ljava/io/InputStream;)Lan;	a	fromStream
		p	0		stream
	m	(Ljava/io/File;)Lan;	a	fromFile
		c	Create a CompoundTag from a file.
		p	0		file
	m	(Lan;Ljava/io/OutputStream;)V	a	toStream
		p	1		stream
		p	0		tag
c	rg	net/minecraft/item/Item
	f	Lrg;	s	WOOD_SHOVEL
	f	Lrg;	u	WOOD_AXE
	f	Lrg;	ap	FLINT
	f	Lrg;	o	IRON_INGOT
	f	Lrg;	q	IRON_SWORD
	m	(I)V	<init>	<init>
		p	1		id
	m	()Lqf;	w	getGroup
	f	Lrg;	f	IRON_SHOVEL
	f	Lrg;	l	ARROW
	f	[Lrg;	e	ITEMS
	m	()Ljava/lang/String;	s	getName
	f	Lrg;	n	DIAMOND
	f	I	bT	id
	f	Lrg;	h	IRON_AXE
	f	Lrg;	j	APPLE
	m	(Ljava/lang/String;)Lrg;	b	setName
	f	Ljava/util/Random;	d	RANDOM
	f	Lrg;	t	WOOD_PICKAXE
	f	Lrg;	p	GOLD_INGOT
	f	Lrg;	r	WOOD_SWORD
	m	(Lri;)Ljava/lang/String;	i	getName
	m	(I)Lrg;	d	setStackSize
		p	1		maxStackSize
	f	Lrg;	k	BOW
	f	Lrg;	m	COAL
	f	Lrg;	bI	RECORD_13
	f	I	bU	maxStackSize
	f	Lrg;	g	IRON_PICKAXE
	f	Lrg;	i	FLINT_AND_STEEL
c	aw	net/minecraft/nbt/TagShort
c	rh	net/minecraft/item/ToolMaterial
c	ax	net/minecraft/nbt/TagString
c	ri	net/minecraft/item/ItemStack
	m	()I	j	getDamage
	m	(Lan;)Lan;	b	toTag
		p	1		tag
	f	I	c	id
	f	I	a	count
	f	Lan;	d	tag
	m	(Lrg;II)V	<init>	<init>
		p	2		count
		p	1		item
		p	3		damage
	f	I	e	damage
	m	()Lrg;	b	get
	m	(Lrg;I)V	<init>	<init>
		p	1		item
		p	2		count
	m	(I)V	b	setDamage
		p	1		dmg
	m	(Lan;)V	c	fromTag
		p	1		tag
	m	(Lan;)Lri;	a	createFromTag
		p	0		tag
	m	(III)V	<init>	<init>
		p	3		damage
		p	2		count
		p	1		id
	m	(Lrg;)V	<init>	<init>
		p	1		item
c	ay	net/minecraft/nbt/Tag
	m	(BLjava/lang/String;)Lay;	a	fromByte
		p	0		type
		p	1		data
	m	(Lay;Ljava/io/DataOutput;)V	a	write
	m	()B	a	toByte
	m	(B)Ljava/lang/String;	a	fromByte
	m	(Ljava/io/DataInput;)Lay;	b	read
c	aia	net/minecraft/block/BlockStone
c	az	net/minecraft/net/IPacketHandler
	m	()I	e	getEncryptionSize
	m	()V	b	check
	m	(Ldb;)V	a	acceptPacket
		p	1		packet
	m	()V	a	interruptWorkers
	m	(Ldc;)V	a	setHandler
		p	1		func
	m	()V	f	interrupt
	m	(Ljava/lang/String;[Ljava/lang/Object;)V	a	forceDisconnect
		p	1		key
		p	2		formats
	m	()Ljava/net/SocketAddress;	c	getAddress
c	ayp	ayp
	m	(Ljava/lang/String;FFFFF)V	b	playSound
c	aib	net/minecraft/block/BlockTallGrass
c	rp	net/minecraft/item/PickaxeItem
c	aig	net/minecraft/block/GlassMaterialSound
c	ba	net/minecraft/net/LocalPacketHandler
	c	This handles packets from the same client; when you create a new world and play in it,\nit creates a new "logical server," which this handles.
	f	Ljava/net/SocketAddress;	a	address
	f	Ljava/util/List;	b	packetStack
	m	(Ldc;)V	<init>	<init>
		p	1		handler
	f	Z	e	flag
	m	(Ldb;)V	b	handlePacket
		p	1		packet
c	aif	net/minecraft/block/Block
	f	Laif;	bb	NETHERRACK
	m	()Ljava/lang/String;	a	getName
	f	Laif;	D	LAVA
	f	Laif;	z	BEDROCK
	f	Laif;	Q	SANDSTONE
	f	Laif;	aP	UNLIT_REDSTONE_TORCH
	f	D	cl	maxY
	f	Laif;	U	DETECTOR_RAIL
	f	Laif;	v	DIRT
	f	D	ch	minX
	f	Laif;	I	COAL_ORE
	f	Laii;	g	GRASS_SOUND
	m	(Ljava/lang/String;)Laif;	b	setName
	f	Laif;	M	GLASS
	f	Laif;	aL	IRON_DOOR
	f	Laii;	k	CLOTH_SOUND
	m	(ILjava/util/Random;I)I	a	getDrop
	f	Laii;	cn	sound
	f	I	bZ	subId
	f	Laif;	C	FLOWING_LAVA
	f	Laif;	y	SAPLING
	f	Lacn;	cp	material
	m	(Luo;IIII)V	a	a
		p	1		world
	f	Laif;	ap	OBSIDIAN
	f	D	ci	minY
	f	Laif;	P	DISPENSER
	f	Laif;	at	SPAWNER
	f	Laif;	T	GOLDEN_RAIL
	f	Laib;	X	TALL_GRASS
	f	Laii;	f	DIRT_SOUND
	f	Laif;	bj	LOCKED_CHEST
	f	Laif;	aK	STONE_PRESSURE_PLATE
	f	Laif;	H	IRON_ORE
	f	Laii;	j	GLASS_SOUND
	f	D	cm	maxZ
	f	Laif;	aO	LIT_REDSTONE_ORE
	f	Laif;	L	SPONGE
	f	Laif;	B	WATER
	f	Ljava/lang/String;	b	name
	f	I	ca	id
	m	(Luo;III)V	g	g
		p	4		z
		p	3		y
		p	2		x
		p	1		world
	f	Lafj;	Y	DEAD_BUSH
	f	Laif;	F	GRAVEL
	f	Laif;	W	COBWEB
	f	Laif;	x	PLANKS
	f	D	cj	minZ
	f	Lagj;	K	LEAVES
	f	Laga;	u	GRASS
	f	Laif;	O	LAPIS_BLOCK
	f	Laif;	S	BED
	m	()Ljava/lang/String;	t	getTranslatedName
	f	Laif;	t	STONE
	f	Laif;	G	GOLD_ORE
	f	Laif;	aJ	LEVER
	f	Laii;	e	WOOD_SOUND
	m	(Laii;)Laif;	a	sound
		p	1		material
	m	(FFFFFF)V	a	setBounds
		p	6		maxZ
		p	5		maxY
		p	2		minY
		p	1		minX
		p	4		maxX
		p	3		minZ
	f	Laif;	aN	REDSTONE_ORE
	m	(Luo;IIILjava/util/Random;)V	b	b
		p	1		world
	f	Laii;	i	RAIL_SOUND
	f	Laif;	A	FLOWING_WATER
	f	Laif;	bc	SOUL_SAND
	m	(Lqf;)Laif;	a	setGroup
		p	1		group
	f	Laif;	E	SAND
	m	(F)Laif;	b	resistance
	f	Lafx;	ar	FIRE
	f	Laif;	Z	PISTON_BASE
	f	Laif;	w	COBBLESTONE
	m	(ILacn;)V	<init>	<init>
		p	2		material
		p	1		id
	f	[Laif;	m	BLOCKS
	f	Laif;	aQ	LIT_REDSTONE_TORCH
	f	Laif;	R	NOTE_BLOCK
	f	Laii;	l	SAND_SOUND
	f	D	ck	maxX
	f	Laif;	V	STICKY_PISTON_BASE
	m	(I)I	a	getSubId
		p	1		id
	f	Laif;	aI	SIGN
	f	Laif;	J	LOGS
	f	Lqf;	a	group
	m	(F)Laif;	c	hardness
		p	1		hardness
	f	Laii;	d	DUST_SOUND
		c	Redstone dust material
	f	Laif;	aM	WOOD_PRESSURE_PLATE
	f	Laif;	N	LAPIS_ORE
	f	Laii;	h	STONE_SOUND
c	bb	net/minecraft/net/ClientPacketHandler
	f	Z	m	flagged
	m	()Ljava/net/Socket;	g	getSocket
	m	()V	j	read
	f	[Ljava/lang/Object;	w	disconnectFormats
	f	I	B	delay
	f	Z	s	closed
	f	Ljava/lang/Thread;	t	writeWorker
	m	(Ljava/net/Socket;Ljava/lang/String;Ldc;Ljava/security/PrivateKey;)V	<init>	<init>
		p	1		socket
		p	2		name
		p	3		handler
		p	4		key
	f	Ljava/util/List;	q	encrypted
	f	I	e	lastPacket
	f	Ljava/io/DataOutputStream;	l	outStream
	f	Ljava/util/List;	p	unencrypted
	m	(Ljava/net/Socket;Ljava/lang/String;Ldc;)V	<init>	<init>
		p	1		socket
		p	2		name
		p	3		handler
	f	Ljava/util/concurrent/atomic/AtomicInteger;	a	readingPackets
	f	Ljava/lang/String;	v	disconnectReason
	f	Z	g	writing
	f	Ljava/net/SocketAddress;	j	address
	f	I	y	size
	m	(Ldb;Z)Z	a	a
		p	2		encrypt
		p	1		packet
	m	()V	k	write
	f	Ljava/net/Socket;	i	socket
	m	(Z)Ldb;	a	pop
		p	1		encrypt
	f	Z	n	n
	f	Ljava/security/PrivateKey;	A	key
	f	Ldc;	r	netHandler
	f	Ljava/lang/Thread;	u	readWorker
	m	(Ljava/lang/Exception;)V	a	forceDisconect
		p	1		e
	f	Ljava/util/concurrent/atomic/AtomicInteger;	b	writingPackets
	f	Ljavax/crypto/SecretKey;	z	secret
	f	Z	f	reading
	f	Ljava/io/DataInputStream;	k	inStream
c	aii	net/minecraft/block/MaterialSound
	c	Used to dictate sounds of blocks breaking and stepping on blocks
	m	()Ljava/lang/String;	d	breakSound
		c	Get the material break sound
	m	(Ljava/lang/String;FF)V	<init>	<init>
		p	1		name
		p	2		volume
		p	3		pitch
	f	F	c	pitch
	m	()F	c	getPitch
		c	Get the pitch of the sound
	f	F	b	volume
	m	()F	b	getVolume
		c	Get the volume of the sound
	f	Ljava/lang/String;	a	name
	m	()Ljava/lang/String;	a	stepSound
		c	Get the footstep sound
c	bc	net/minecraft/net/ReadWorkerThread
c	aih	net/minecraft/block/SandMaterialSound
c	bd	net/minecraft/net/WriteWorkerThread
c	be	net/minecraft/net/InterruptThread
	f	Lbb;	a	handler
	m	(Lbb;)V	<init>	<init>
		p	1		handler
	m	()V	run	run
c	jm	net/minecraft/entity/Entity
	m	(Ljd;I)Z	a	damage
	f	D	t	x
	m	([D)Lat;	a	list
	f	D	v	z
	f	D	u	y
	m	([F)Lat;	a	list
	f	F	R	fallDistance
	f	Z	E	onGround
	m	()Z	ad	onFIre
	m	()Ljava/lang/String;	ak	getName
	m	(DDD)V	h	setMotion
		p	5		z
		p	3		y
		p	1		x
	m	()I	ai	getAir
	f	I	k	id
	f	Ljava/util/Random;	Z	rand
	f	F	A	rotationY
	m	(Lan;)V	a	fromTag
	f	I	a	globalId
	m	(Lan;)V	b	toTag
	f	I	c	fireTick
	m	(Lan;)V	d	toRawTag
		p	1		tag
	m	(Lan;)V	e	fromRawTag
		p	1		tag
	f	D	x	motionY
	f	F	z	rotationX
	f	D	w	motionX
	f	D	y	motionZ
c	bf	net/minecraft/net/DisconnectThread
	f	Lbb;	a	handler
	m	(Lbb;)V	<init>	<init>
		p	1		handler
	m	()V	run	run
c	bg	net/minecraft/net/packet/RidableSpawnPacket
c	aio	net/minecraft/block/BlockLogs
c	bh	net/minecraft/net/packet/ExpOrbSpawnPacket
c	bi	net/minecraft/net/packet/WeatherPacket
c	bj	net/minecraft/net/packet/EntityItemSpawnPacket
	f	I	b	x
	f	I	a	entityId
	f	I	d	z
	f	I	c	y
	f	I	h	id
	f	I	j	damage
	f	I	i	count
	m	(Lni;)V	<init>	<init>
		p	1	ni	entity
	f	B	e	motionX
	f	B	g	motionZ
	f	B	f	motionY
c	bk	net/minecraft/net/packet/LivingSpawnPacket
	m	(Ljv;)V	<init>	<init>
		p	1	jv	entity
c	jv	net/minecraft/entity/EntityLiving
c	ait	net/minecraft/block/BlockCobweb
c	sa	net/minecraft/item/ShovelItem
c	bq	net/minecraft/net/packet/ChatPacket
c	aiv	net/minecraft/block/BlockPlanks
c	br	net/minecraft/net/packet/ChunkTilesUpdatePacket
	f	I	b	y
	f	I	a	x
	f	I	d	z
c	kb	net/minecraft/util/PropertyDelegate
	c	Seamlessly store data between client and server.
	m	(I)B	a	getByte
		p	1		id
	m	(ILjava/lang/Object;)V	a	createProperty
		p	2		value
		p	1		id
	f	Ljava/util/HashMap;	a	classMap
	m	(Ljava/util/List;Ljava/io/DataOutputStream;)V	a	toStream
		p	1		stream
		p	0		list
	f	Ljava/util/Map;	b	propertyMap
	m	(I)I	c	getInt
		p	1		id
	m	(Ljava/io/DataInputStream;)Ljava/util/List;	a	fromStream
		p	0		stream
	m	(I)Lkc;	i	getProperty
		p	1		id
	m	(ILjava/lang/Object;)V	b	setProperty
		p	1		id
		p	2		value
	m	(Ljava/io/DataOutputStream;)V	a	fromStream
		p	1		stream
	m	(I)S	b	getShort
		p	1		id
	m	(I)Ljava/lang/String;	e	getString
		p	1		id
	m	()Ljava/util/List;	c	getProperties
	m	()Z	a	hasNewProperties
	m	()Ljava/util/List;	b	getNewProperties
	m	(Ljava/io/DataOutputStream;Lkc;)V	a	toStream
		p	0		stream
		p	1		prop
	f	Ljava/util/concurrent/locks/ReadWriteLock;	d	lock
	f	Z	c	newProps
c	kc	net/minecraft/net/Property
	m	(Z)V	a	setNew
	m	(Ljava/lang/Object;)V	a	set
	m	()Ljava/lang/Object;	b	getObject
	f	Ljava/lang/Object;	c	object
	m	(IILjava/lang/Object;)V	<init>	<init>
		p	3		obj
	m	()I	c	getType
	m	()Z	d	isNew
c	sm	net/minecraft/item/SwordItem
c	a	net/minecraft/crash/CrashReport
	c	CrashReport handles all reporting of crashes, and their saving to file.
	f	Ljava/util/Map;	c	infoMap
	m	(Ljava/lang/StringBuilder;)V	a	appendInfo
		c	Append crash report onto a {@link StringBuilder}.
		p	1		builder
	m	(Ljava/io/File;)Z	a	toFile
		p	1		file
	m	(Ljava/lang/String;Ljava/lang/Throwable;)V	<init>	<init>
		p	2		throwable
		p	1		cause
	f	Ljava/lang/Throwable;	b	throwable
	m	()Ljava/lang/Throwable;	b	getThrowable
	m	()V	g	putSpecifications
		c	Add computer specifications to the CrashReport.
	m	(Ljava/lang/String;Ljava/util/concurrent/Callable;)V	a	putInfo
		p	2		object
		p	1		name
	f	Ljava/lang/String;	a	cause
	m	()Ljava/lang/String;	a	getCause
	f	Ljava/io/File;	d	out
	m	()Ljava/io/File;	f	getFile
	m	()Ljava/lang/String;	e	finalize
	m	()Ljava/lang/String;	c	toString
	m	(Ljava/lang/String;Ljava/lang/Object;)V	a	putInfo
		p	2		object
		p	1		name
	m	()Ljava/lang/String;	d	printStackTrace
	m	(Ljava/lang/String;Ljava/lang/Throwable;)V	a	putInfo
		p	2		throwable
		p	1		name
	m	()Ljava/lang/String;	h	addComment
c	aji	net/minecraft/block/BlockPistonBase
c	b	net/minecraft/crash/CallableVersion
	c	
	m	()Ljava/lang/Object;	call	call
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
c	c	net/minecraft/crash/CallableOSInfo
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
	m	()Ljava/lang/Object;	call	call
c	d	net/minecraft/crash/CallableJavaVersion
	m	()Ljava/lang/Object;	call	call
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
c	e	net/minecraft/crash/CallableJVM
	m	()Ljava/lang/Object;	call	call
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
c	f	net/minecraft/crash/CallableMemory
	m	()Ljava/lang/Object;	call	call
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
c	g	net/minecraft/crash/CallableArguments
	f	La;	a	crashReport
	m	(La;)V	<init>	<init>
		p	1		crashReport
	m	()Ljava/lang/Object;	call	call
c	h	net/minecraft/util/math/Direction
c	i	net/minecraft/util/math/Facing
c	cm	net/minecraft/net/packet/KeepAlivePacket
c	j	net/minecraft/util/math/Vector3i
	c	Used for positioning blocks. 
	m	(III)F	e	dot
		c	Perform the dot product on the specified x, y, and z coordinates.
		p	1		x
		p	2		y
		p	3		z
	f	I	b	y
	m	(III)V	<init>	<init>
		c	Create a new Vector3i with specified x, y, and z components.
		p	2		y
		p	1		x
		p	3		z
	f	I	a	x
	m	(III)V	b	set
		p	1		x
		p	2		y
		p	3		z
	m	(Ljava/lang/Object;)Z	equals	equals
		p	1		other
	m	()V	<init>	<init>
		c	Create a Vector3i with all zeroes.
	m	(Lj;)V	<init>	<init>
		c	Create a new Vector3i with the same positional value as another Vector3i.
		p	1		other
	m	(Ljava/lang/Object;)I	compareTo	getDirectional
		c	idk wtf this does
		p	1		other
	f	I	c	z
c	k	net/minecraft/util/error/CrashReportException
	m	(La;)V	<init>	<init>
		p	1		report
	m	()Ljava/lang/Throwable;	getCause	getCause
	m	()La;	a	getCrashReport
	f	La;	a	report
	m	()Ljava/lang/String;	getMessage	getMessage
c	l	net/minecraft/util/FontHelper
	c	Used to process text for use by the font renderer.
	m	(C)Z	a	canRender
		c	Check if a character is supported within the FontRenderer.
		p	0		character
	m	(Ljava/lang/String;)Ljava/lang/String;	a	processString
		c	Remove all unsupported characters from a string
		p	0		str
	f	[C	b	SPECIAL_CHARACTERS
	m	()Ljava/lang/String;	a	loadFont
	f	Ljava/lang/String;	a	FONT
		c	Every character that is supported inside the font renderer, packed into one string.
c	m	net/minecraft/util/ITranslator
c	n	net/minecraft/command/Command
	m	(Lr;)Lof;	c	parsePlayer
		p	0		executor
	f	Lm;	a	translator
	m	(Lr;Ljava/lang/String;II)I	a	parseInt
		c	Shorthand for parsing an integer from a string with bounds
		p	2		lower
		p	1		val
		p	0		executor
		p	3		upper
	m	(Lr;Ljava/lang/String;)I	a	parseInt
		c	Shorthand for parsing an integer from a string
		p	1		val
		p	0		executor
	m	(Ljava/lang/String;Ljava/lang/String;)Z	a	nameEquals
		p	0		name
		p	1		other
	m	([Ljava/lang/String;I)Ljava/lang/String;	a	concatArguments
		p	0		args
		p	1		offset
	m	([Ljava/lang/Object;)Ljava/lang/String;	a	concat
	m	(Lm;)V	a	setTranslator
	m	(Lr;Ljava/lang/String;[Ljava/lang/Object;)V	a	sendMessage
	m	(Lr;Ljava/lang/String;I)I	a	parseInt
		c	Shorthand for parsing an integer from a string with a lower bound
		p	2		lower
		p	0		executor
		p	1		val
	m	(Ljava/lang/Object;)I	compareTo	compareTo
		p	1		other
c	o	net/minecraft/command/Commands
	f	Ljava/util/Map;	a	commandMap
	m	(Lp;)Lp;	a	execute
		p	1		command
	m	([Ljava/lang/String;)[Ljava/lang/String;	a	parseArgs
		p	0		args
	f	Ljava/util/Set;	b	commands
c	p	net/minecraft/command/ICommand
	m	(Lr;)Z	b	canExecute
	m	(Lr;)Ljava/lang/String;	a	getUsage
		p	1		player
	m	()Ljava/util/List;	a	getAliases
	m	()Ljava/lang/String;	b	getName
	m	(Lr;[Ljava/lang/String;)Ljava/util/List;	a	get
		p	2		args
		p	1		executor
	m	(Lr;[Ljava/lang/String;)V	b	execute
		p	1		player
		p	2		args
c	q	net/minecraft/command/ICommandParser
	m	(Lr;)Ljava/util/List;	a	getExecutable
		p	1		executor
	m	()Ljava/util/Map;	a	getMap
	m	(Lr;Ljava/lang/String;)Ljava/util/List;	b	parse
		p	2		command
		p	1		executor
	m	(Lr;Ljava/lang/String;)V	a	execute
		p	1		executor
		p	2		command
c	r	net/minecraft/command/IExecutor
	m	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;	a	translate
		p	2		args
		p	1		key
	m	(Ljava/lang/String;)V	a	sendMessage
c	s	net/minecraft/command/CommandDefaultGamemode
c	t	net/minecraft/command/CommandExperience
	m	(Ljava/lang/String;)Lof;	a	getPlayer
c	u	net/minecraft/command/CommandGamemode
c	v	net/minecraft/command/CommandGive
	m	(Ljava/lang/String;)Lof;	a	getPlayer
		p	1		name
c	w	net/minecraft/command/CommandHelp
	m	()Ljava/util/Map;	c	getCommandMap
	m	(Lr;)Ljava/util/List;	d	getSortedCommands
		p	1		executor
c	x	net/minecraft/command/CommandKill
c	y	net/minecraft/command/CommandSeed
c	db	net/minecraft/net/packet/Packet
	m	(IZZLjava/lang/Class;)V	a	register
		p	0		id
		p	3		type
	m	(Ljava/io/DataInputStream;)Lan;	d	readTag
		p	0	dataInputStream	in
	m	(Lan;Ljava/io/DataOutputStream;)V	a	write
		p	1	dataOutputStream	out
		p	0	an	tag
	m	(Ljava/io/DataInputStream;)V	a	read
		p	1	dataInputStream	in
	m	(Ldc;)V	a	process
		p	1		handler
	m	(Ljava/lang/String;Ljava/io/DataOutputStream;)V	a	write
		p	1	dataOutputStream	out
		p	0	string	val
	m	()I	a	size
	f	Z	r	isEncrypted
	m	(Ldb;Ljava/io/DataOutputStream;)V	a	write
		p	0	db	packet
		p	1	dataOutputStream	out
	m	(Ljava/io/DataInputStream;Z)Ldb;	a	a
		p	0	dataInputStream	in
	m	(Ljava/io/DataOutputStream;[B)V	a	write
		p	0	dataOutputStream	out
		p	1	arr	arr
	m	(Ljava/io/DataInputStream;)Lri;	c	readStack
		p	0	dataInputStream	in
	m	(I)Ldb;	d	get
		p	0	integer	id
	f	Ljava/util/Map;	a	classMap
	m	(Ljava/io/DataInputStream;I)Ljava/lang/String;	a	fromStream
	m	()I	k	get
	f	Lib;	l	idMap
	f	J	m	time
	f	J	q	size
	m	(Ljava/io/DataInputStream;)[B	b	readByteArray
		p	0	dataInputStream	in
	m	(Lri;Ljava/io/DataOutputStream;)V	a	write
		p	0	ri	stack
		p	1	dataOutputStream	out
	m	(Ljava/io/DataOutputStream;)V	a	write
		p	1	dataOutputStream	out
c	dc	net/minecraft/net/NetworkHandler
	c	TODO: is this server or client? i dont wanna know tbh
	m	(Lbj;)V	a	handle
	m	(Lcf;)V	a	handle
	m	(Leg;)V	a	handle
	m	(Ldi;)V	a	handle
	m	(Lbg;)V	a	handle
	m	(Ldb;)V	a	handle
	m	(Lde;)V	a	handle
	m	(Ljava/lang/String;[Ljava/lang/Object;)V	a	disconnect
	m	(Lee;)V	a	handle
	m	(Lea;)V	a	handle
	m	(Ldz;)V	a	handle
	m	(Lcx;)V	a	handle
	m	(Lbq;)V	a	handle
	m	(Lbr;)V	a	handle
	m	(Lct;)V	a	handle
	m	(Lcs;)V	a	handle
	m	(Lcn;)V	a	handle
	m	(Lbm;)V	a	handle
	m	(Ldn;)V	a	handle
	m	(Lbn;)V	a	handle
c	acn	net/minecraft/block/Material
	f	Lacn;	d	WOOD
	f	Lacn;	e	STONE
	f	Lacn;	q	GLASS
	f	Lacn;	h	LAVA
	f	Lacn;	g	WATER
c	net/minecraft/server/MinecraftServer	net/minecraft/server/MinecraftServer
	m	()Lq;	D	getCommandParser
	m	()Lnet/minecraft/server/MinecraftServer;	C	getInstance
	m	()Let;	ab	getPlayers
	f	Ljava/util/logging/Logger;	a	LOGGER
c	uo	net/minecraft/world/World
	f	Z	K	isClient
c	uu	uu
	m	(Lof;IIIII)V	a	a
		p	3		x
		p	4		y
		p	5		z
c	ei	net/minecraft/net/server/BanList
c	el	net/minecraft/util/LoggerHandler
	f	Ljava/util/logging/Logger;	a	LOGGER
	m	()V	a	logToFile
		c	Save all logs from current session to file
c	em	net/minecraft/util/LoggerFormat
	c	Used to format logs for client and server.
	m	(Ljava/util/logging/LogRecord;)Ljava/lang/String;	format	format
		p	1		record
	f	Ljava/text/SimpleDateFormat;	a	format
c	es	net/minecraft/crash/CallableServerInfo
	f	Lnet/minecraft/server/MinecraftServer;	a	server
	m	(Lnet/minecraft/server/MinecraftServer;)V	<init>	<init>
		p	1		server
c	et	net/minecraft/net/server/ServerJoins
	m	(Lgt;)V	e	remove
	f	Lei;	h	bannedips
	f	Lei;	g	banned
	m	(Ljava/lang/String;)Lgt;	f	get
	m	(Laz;Lgt;)V	a	handlePlayer
		p	2		player
		p	1		handler
	m	(Lnet/minecraft/server/MinecraftServer;)V	<init>	<init>
		p	1		server
	m	(Ldb;)V	a	send
	f	Ljava/util/List;	b	players
	m	(Lgt;)V	a	a
		p	1		player
	f	Ljava/util/logging/Logger;	a	Logger
c	ev	net/minecraft/util/ServerProperties
	c	Helper class to aid with creating and loading properties for server files.
	m	()Ljava/io/File;	c	getFile
	f	Ljava/io/File;	c	file
	f	Ljava/util/Properties;	b	props
	m	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;	a	getString
		c	Get a string from the properties file, or set it to a default if it wasn't found
		p	2		def
			c	Default string to set if key does not exist
		p	1		key
			c	Key to get from the properties file
	m	(Ljava/io/File;)V	<init>	<init>
		p	1		file
	m	(Ljava/lang/String;Z)Z	a	getBoolean
	m	(Ljava/lang/String;I)I	a	getInt
		p	1		key
		p	2		def
	m	()V	b	generate
	m	()V	a	generateProperties
	f	Ljava/util/logging/Logger;	a	LOGGER
c	ni	net/minecraft/entity/EntityItem
	f	Lri;	a	stack
c	fk	net/minecraft/command/CommandSaveAll
c	aev	net/minecraft/block/BlockBed
c	of	net/minecraft/entity/EntityPlayer
	f	Ljava/lang/String;	bJ	name
c	afj	net/minecraft/block/BlockDeadBush
c	afk	net/minecraft/block/BlockDetectorRail
c	afn	net/minecraft/block/BlockDirt
c	afo	net/minecraft/block/BlockDispenser
c	gt	net/minecraft/entity/ServerEntityPlayer
c	gy	net/minecraft/net/ServerPacketHandler
	f	Laz;	b	handler
	f	I	i	id
	f	Lnet/minecraft/server/MinecraftServer;	d	server
	m	()V	d	tick
	m	(Ldb;)V	b	send
	f	Lgt;	e	player
	f	Ljava/util/Random;	k	rand
	m	(Lnet/minecraft/server/MinecraftServer;Laz;Lgt;)V	<init>	<init>
		p	1	minecraftServer	server
		p	2	az	handler
		p	3	gt	player
c	afx	net/minecraft/block/BlockFire
c	afz	net/minecraft/block/BlockGlass
c	aga	net/minecraft/block/BlockGrass
c	agb	net/minecraft/block/BlockGravel
